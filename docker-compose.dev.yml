# Docker Compose - DESENVOLVIMENTO LOCAL
# Apenas infraestrutura (PostgreSQL + Redis)
# Backend e Frontend rodam com `npm run dev` para hot reload

version: '3.8'

services:
  # ============================================
  # POSTGRESQL DATABASE
  # ============================================
  postgres:
    image: postgres:16-alpine
    container_name: hpo-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: hpo_password
      POSTGRES_DB: hpo_platform
    ports:
      - "5433:5432"  # 5433 para n√£o conflitar com PostgreSQL local
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d hpo_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hpo-network

  # ============================================
  # REDIS CACHE
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: hpo-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hpo-network

  # ============================================
  # BACKEND API (Node.js + Express + TypeScript)
  # ============================================
  backend:
    build:
      context: ./hpo-platform-backend
      dockerfile: Dockerfile
    container_name: hpo-backend-dev
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: "postgresql://postgres:hpo_password@postgres:5432/hpo_platform?schema=public"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: "development-jwt-secret-change-in-production"
      FRONTEND_URL: "http://localhost:5173"
      ORCID_CLIENT_ID: "${ORCID_CLIENT_ID:-}"
      ORCID_CLIENT_SECRET: "${ORCID_CLIENT_SECRET:-}"
      ORCID_REDIRECT_URI: "http://localhost:3001/api/auth/orcid/callback"
      EMAIL_HOST: "smtp.ethereal.email"
      EMAIL_PORT: 587
      EMAIL_USER: "${EMAIL_USER:-}"
      EMAIL_PASSWORD: "${EMAIL_PASSWORD:-}"
    ports:
      - "3001:3001"
    volumes:
      - ./hpo-platform-backend/src:/app/src
      - ./hpo-platform-backend/prisma:/app/prisma
      - /app/node_modules  # Evitar conflito com node_modules local
    networks:
      - hpo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # PRISMA STUDIO (opcional - gerenciamento visual do DB)
  # ============================================
  prisma-studio:
    image: node:20-alpine
    container_name: hpo-prisma-studio
    restart: unless-stopped
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: "postgresql://postgres:hpo_password@postgres:5432/hpo_platform?schema=public"
    ports:
      - "5555:5555"
    volumes:
      - ./hpo-platform-backend/prisma:/app/prisma
      - ./hpo-platform-backend/package.json:/app/package.json
    command: sh -c "npm install -g prisma && npx prisma studio --port 5555 --browser none"
    networks:
      - hpo-network

volumes:
  postgres_dev_data:
  redis_dev_data:

networks:
  hpo-network:
    driver: bridge
