
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  username: 'username',
  password: 'password',
  orcidId: 'orcidId',
  role: 'role',
  institution: 'institution',
  specialty: 'specialty',
  country: 'country',
  bio: 'bio',
  avatarUrl: 'avatarUrl',
  points: 'points',
  level: 'level',
  streak: 'streak',
  lastActiveAt: 'lastActiveAt',
  approvedCount: 'approvedCount',
  hasCompletedOnboarding: 'hasCompletedOnboarding',
  warningCount: 'warningCount',
  lastWarningAt: 'lastWarningAt',
  bannedBy: 'bannedBy',
  promotedAt: 'promotedAt',
  isActive: 'isActive',
  isBanned: 'isBanned',
  bannedAt: 'bannedAt',
  bannedReason: 'bannedReason',
  isVerified: 'isVerified',
  emailVerified: 'emailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HpoTermScalarFieldEnum = {
  id: 'id',
  hpoId: 'hpoId',
  labelEn: 'labelEn',
  definitionEn: 'definitionEn',
  synonymsEn: 'synonymsEn',
  category: 'category',
  parentId: 'parentId',
  difficulty: 'difficulty',
  translationStatus: 'translationStatus',
  hpoVersion: 'hpoVersion',
  isObsolete: 'isObsolete',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TranslationScalarFieldEnum = {
  id: 'id',
  termId: 'termId',
  userId: 'userId',
  labelPt: 'labelPt',
  definitionPt: 'definitionPt',
  synonymsPt: 'synonymsPt',
  status: 'status',
  confidence: 'confidence',
  source: 'source',
  isLegacy: 'isLegacy',
  aiSuggestion: 'aiSuggestion',
  aiConfidence: 'aiConfidence',
  approvalCount: 'approvalCount',
  rejectionCount: 'rejectionCount',
  averageRating: 'averageRating',
  syncedToHpo: 'syncedToHpo',
  syncedAt: 'syncedAt',
  approvedBy: 'approvedBy',
  rejectedBy: 'rejectedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  approvedAt: 'approvedAt'
};

exports.Prisma.ValidationScalarFieldEnum = {
  id: 'id',
  translationId: 'translationId',
  validatorId: 'validatorId',
  rating: 'rating',
  decision: 'decision',
  comments: 'comments',
  suggestions: 'suggestions',
  accuracyScore: 'accuracyScore',
  clarityScore: 'clarityScore',
  consistencyScore: 'consistencyScore',
  timeSpentSeconds: 'timeSpentSeconds',
  createdAt: 'createdAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  translationId: 'translationId',
  userId: 'userId',
  content: 'content',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  iconUrl: 'iconUrl',
  points: 'points',
  rarity: 'rarity',
  createdAt: 'createdAt'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  badgeId: 'badgeId',
  earnedAt: 'earnedAt'
};

exports.Prisma.UserActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  points: 'points',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConflictReviewScalarFieldEnum = {
  id: 'id',
  hpoTermId: 'hpoTermId',
  type: 'type',
  status: 'status',
  priority: 'priority',
  winningTranslationId: 'winningTranslationId',
  resolution: 'resolution',
  resolvedBy: 'resolvedBy',
  resolvedAt: 'resolvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommitteeVoteScalarFieldEnum = {
  id: 'id',
  conflictReviewId: 'conflictReviewId',
  voterId: 'voterId',
  translationId: 'translationId',
  voteType: 'voteType',
  comment: 'comment',
  votedAt: 'votedAt'
};

exports.Prisma.RejectionScalarFieldEnum = {
  id: 'id',
  translationId: 'translationId',
  rejectedBy: 'rejectedBy',
  reasonCode: 'reasonCode',
  detailedReason: 'detailedReason',
  suggestions: 'suggestions',
  canResubmit: 'canResubmit',
  createdAt: 'createdAt'
};

exports.Prisma.AdminAuditLogScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  action: 'action',
  targetType: 'targetType',
  targetId: 'targetId',
  changes: 'changes',
  reason: 'reason',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SyncLogScalarFieldEnum = {
  id: 'id',
  syncDate: 'syncDate',
  initiatedBy: 'initiatedBy',
  translationsCount: 'translationsCount',
  babelonFilePath: 'babelonFilePath',
  githubPrUrl: 'githubPrUrl',
  status: 'status',
  errorMessage: 'errorMessage',
  completedAt: 'completedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  link: 'link',
  read: 'read',
  createdAt: 'createdAt'
};

exports.Prisma.StrikeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  adminId: 'adminId',
  reason: 'reason',
  detailedReason: 'detailedReason',
  translationId: 'translationId',
  severity: 'severity',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  TRANSLATOR: 'TRANSLATOR',
  REVIEWER: 'REVIEWER',
  VALIDATOR: 'VALIDATOR',
  MODERATOR: 'MODERATOR',
  COMMITTEE_MEMBER: 'COMMITTEE_MEMBER',
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

exports.TranslationStatus = exports.$Enums.TranslationStatus = {
  NOT_TRANSLATED: 'NOT_TRANSLATED',
  DRAFT: 'DRAFT',
  PENDING_REVIEW: 'PENDING_REVIEW',
  IN_REVIEW: 'IN_REVIEW',
  PENDING_VALIDATION: 'PENDING_VALIDATION',
  LEGACY_PENDING: 'LEGACY_PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  NEEDS_REVISION: 'NEEDS_REVISION'
};

exports.TranslationSource = exports.$Enums.TranslationSource = {
  MANUAL: 'MANUAL',
  AI_ASSISTED: 'AI_ASSISTED',
  IMPORTED: 'IMPORTED',
  LEGACY: 'LEGACY'
};

exports.ValidationDecision = exports.$Enums.ValidationDecision = {
  APPROVED: 'APPROVED',
  NEEDS_REVISION: 'NEEDS_REVISION',
  REJECTED: 'REJECTED'
};

exports.BadgeRarity = exports.$Enums.BadgeRarity = {
  COMMON: 'COMMON',
  RARE: 'RARE',
  EPIC: 'EPIC',
  LEGENDARY: 'LEGENDARY'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  TRANSLATION_CREATED: 'TRANSLATION_CREATED',
  TRANSLATION_APPROVED: 'TRANSLATION_APPROVED',
  TRANSLATION_REJECTED: 'TRANSLATION_REJECTED',
  VALIDATION_COMPLETED: 'VALIDATION_COMPLETED',
  BADGE_EARNED: 'BADGE_EARNED',
  LEVEL_UP: 'LEVEL_UP',
  STREAK_MILESTONE: 'STREAK_MILESTONE',
  COMMENT_ADDED: 'COMMENT_ADDED',
  ROLE_PROMOTION: 'ROLE_PROMOTION'
};

exports.ConflictType = exports.$Enums.ConflictType = {
  MULTIPLE_TRANSLATIONS: 'MULTIPLE_TRANSLATIONS',
  QUALITY_DISPUTE: 'QUALITY_DISPUTE',
  TERMINOLOGY_CONFLICT: 'TERMINOLOGY_CONFLICT'
};

exports.ConflictStatus = exports.$Enums.ConflictStatus = {
  PENDING_COMMITTEE: 'PENDING_COMMITTEE',
  IN_VOTING: 'IN_VOTING',
  RESOLVED: 'RESOLVED',
  ESCALATED: 'ESCALATED'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.VoteType = exports.$Enums.VoteType = {
  APPROVE_THIS: 'APPROVE_THIS',
  CREATE_NEW: 'CREATE_NEW',
  ABSTAIN: 'ABSTAIN'
};

exports.RejectionReason = exports.$Enums.RejectionReason = {
  INCORRECT_TRANSLATION: 'INCORRECT_TRANSLATION',
  POOR_GRAMMAR: 'POOR_GRAMMAR',
  NOT_MEDICAL_TERM: 'NOT_MEDICAL_TERM',
  DUPLICATE: 'DUPLICATE',
  OFFENSIVE_CONTENT: 'OFFENSIVE_CONTENT',
  SPAM: 'SPAM',
  INCONSISTENT: 'INCONSISTENT',
  OTHER: 'OTHER'
};

exports.AdminAction = exports.$Enums.AdminAction = {
  APPROVE_TRANSLATION: 'APPROVE_TRANSLATION',
  REJECT_TRANSLATION: 'REJECT_TRANSLATION',
  DELETE_TRANSLATION: 'DELETE_TRANSLATION',
  BAN_USER: 'BAN_USER',
  UNBAN_USER: 'UNBAN_USER',
  PROMOTE_USER: 'PROMOTE_USER',
  DEMOTE_USER: 'DEMOTE_USER',
  SYNC_TO_HPO: 'SYNC_TO_HPO',
  RESOLVE_CONFLICT: 'RESOLVE_CONFLICT',
  EDIT_TERM: 'EDIT_TERM',
  SYSTEM_CONFIG: 'SYSTEM_CONFIG',
  BULK_APPROVE: 'BULK_APPROVE',
  BULK_REJECT: 'BULK_REJECT',
  VOTE_ON_CONFLICT: 'VOTE_ON_CONFLICT',
  DEACTIVATE_STRIKE: 'DEACTIVATE_STRIKE'
};

exports.SyncStatus = exports.$Enums.SyncStatus = {
  PENDING: 'PENDING',
  GENERATING_FILE: 'GENERATING_FILE',
  CREATING_PR: 'CREATING_PR',
  PR_CREATED: 'PR_CREATED',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  TRANSLATION_APPROVED: 'TRANSLATION_APPROVED',
  TRANSLATION_REJECTED: 'TRANSLATION_REJECTED',
  VALIDATION_RECEIVED: 'VALIDATION_RECEIVED',
  CONFLICT_VOTE_NEEDED: 'CONFLICT_VOTE_NEEDED',
  LEVEL_UP: 'LEVEL_UP',
  BADGE_EARNED: 'BADGE_EARNED',
  COMMENT_RECEIVED: 'COMMENT_RECEIVED',
  SYSTEM_ANNOUNCEMENT: 'SYSTEM_ANNOUNCEMENT',
  CONFLICT_RESOLVED: 'CONFLICT_RESOLVED',
  SYNC_COMPLETED: 'SYNC_COMPLETED',
  USER_SUSPENDED: 'USER_SUSPENDED',
  USER_PROMOTED: 'USER_PROMOTED',
  STRIKE_RECEIVED: 'STRIKE_RECEIVED',
  STRIKE_WARNING: 'STRIKE_WARNING',
  ACCOUNT_SUSPENDED: 'ACCOUNT_SUSPENDED',
  ACCOUNT_RESTORED: 'ACCOUNT_RESTORED',
  ROLE_PROMOTION: 'ROLE_PROMOTION'
};

exports.StrikeReason = exports.$Enums.StrikeReason = {
  LOW_QUALITY_TRANSLATION: 'LOW_QUALITY_TRANSLATION',
  SPAM_SUBMISSIONS: 'SPAM_SUBMISSIONS',
  INAPPROPRIATE_CONTENT: 'INAPPROPRIATE_CONTENT',
  PLAGIARISM: 'PLAGIARISM',
  MANIPULATION_SYSTEM: 'MANIPULATION_SYSTEM',
  DISRESPECTFUL_BEHAVIOR: 'DISRESPECTFUL_BEHAVIOR',
  VIOLATION_GUIDELINES: 'VIOLATION_GUIDELINES',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  User: 'User',
  HpoTerm: 'HpoTerm',
  Translation: 'Translation',
  Validation: 'Validation',
  Comment: 'Comment',
  Badge: 'Badge',
  UserBadge: 'UserBadge',
  UserActivity: 'UserActivity',
  SystemConfig: 'SystemConfig',
  ConflictReview: 'ConflictReview',
  CommitteeVote: 'CommitteeVote',
  Rejection: 'Rejection',
  AdminAuditLog: 'AdminAuditLog',
  SyncLog: 'SyncLog',
  Notification: 'Notification',
  Strike: 'Strike'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
