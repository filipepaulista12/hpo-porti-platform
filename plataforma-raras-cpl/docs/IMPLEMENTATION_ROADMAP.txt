═══════════════════════════════════════════════════════════════════════════════
                    HPO TRANSLATOR - IMPLEMENTATION ROADMAP
═══════════════════════════════════════════════════════════════════════════════
Data: 15 de Outubro de 2025
Status Atual: 95% funcional | 98% testes passando | 0% dados reais


═══════════════════════════════════════════════════════════════════════════════
🟢 NICE-TO-HAVE (Polimento) - COMEÇAR POR AQUI
═══════════════════════════════════════════════════════════════════════════════

[11] ✅ Falta página de "Como Traduzir" (Guidelines)
     Status: IMPLEMENTADO ✅
     Impacto: Baixo | Tempo: 1h
     Solução: Criar página /guidelines com dicas de boas práticas
     Arquivos: frontend/src/ProductionHPOApp.tsx (GuidelinesPage component)
              docs/GUIA_TRADUCAO.md (conteúdo markdown)

[12] ✅ Não há sistema de "Expert Routing"
     Status: IMPLEMENTADO ✅
     Impacto: Baixo | Tempo: 2h
     Solução: Auto-atribuir termos complexos por specialty do usuário
     Arquivos: backend/src/routes/term.routes.ts (lógica melhorada com mapeamento)
              frontend/src/ProductionHPOApp.tsx (botão "Ver Recomendados")

[13] ✅ Falta dashboard de "Minha Produtividade"
     Status: IMPLEMENTADO ✅
     Impacto: Baixo | Tempo: 3h
     Solução: Adicionar gráfico de traduções por dia, taxa de aprovação
     Arquivos: backend/src/routes/user.routes.ts (endpoint /productivity-chart)
              frontend/src/components/pages/ProfilePage.tsx (gráfico interativo)

[14] ⬜ Não há "Bulk Actions" para tradutores
     Status: Admin tem bulk approve, user não tem bulk delete
     Impacto: Baixo | Tempo: 1.5h
     Solução: Checkboxes + botão "Deletar Selecionadas" no histórico
     Arquivos: frontend/src/ProductionHPOApp.tsx (seção de histórico)

[15] ⬜ Falta integração com Prisma Studio em dev
     Status: Não documentado
     Impacto: Muito Baixo | Tempo: 5min
     Solução: Adicionar script no README.md
     Arquivos: README.md


═══════════════════════════════════════════════════════════════════════════════
🟡 IMPORTANTES (Melhoram experiência)
═══════════════════════════════════════════════════════════════════════════════

[5] ⬜ Falta sistema de "Rejection" estruturado
    Status: Admin rejeita mas sem estrutura detalhada
    Impacto: Médio | Tempo: 4h
    Solução: Criar tabela Rejection + UI para feedback com reason_code
    Arquivos: backend/prisma/schema.prisma (model Rejection)
             backend/src/routes/admin.routes.ts (POST /reject estruturado)
             frontend/src/ProductionHPOApp.tsx (modal de rejeição)

[6] ⬜ Não há moderação de usuários (ban/unban)
    Status: Flag isActive existe mas sem UI/API
    Impacto: Médio | Tempo: 2h
    Solução: Endpoints /admin/users/:id/ban e /unban + UI
    Arquivos: backend/src/routes/admin.routes.ts (novos endpoints)
             frontend/src/ProductionHPOApp.tsx (admin user management)

[7] ⬜ Falta "Three-Strike System"
    Status: Não implementado
    Impacto: Médio | Tempo: 2h
    Solução: warningCount++ a cada rejeição por spam → 3 = suspensão 7 dias
    Arquivos: backend/prisma/schema.prisma (campo warningCount, suspendedUntil)
             backend/src/routes/admin.routes.ts (lógica de warnings)

[8] ⬜ Filtro de "termos recomendados" é básico
    Status: Endpoint existe mas lógica simples
    Impacto: Médio | Tempo: 2h
    Solução: Filtrar por specialty do usuário (neurologista → termos neuro)
    Arquivos: backend/src/routes/term.routes.ts (GET /recommended/for-me)

[9] ⬜ Falta UI para Comentários em Traduções
    Status: Tabela Comment existe mas sem UI
    Impacto: Médio | Tempo: 3h
    Solução: Seção de discussão em cada tradução
    Arquivos: frontend/src/ProductionHPOApp.tsx (comments section)
             backend/src/routes/translation.routes.ts (GET/POST comments)

[10] ⬜ Não há email notifications
     Status: Apenas WebSocket
     Impacto: Médio | Tempo: 3h
     Solução: Integrar SendGrid/Resend para emails importantes
     Arquivos: backend/src/services/email.service.ts (novo)
              backend/src/routes/notification.routes.ts (enviar emails)


═══════════════════════════════════════════════════════════════════════════════
🔴 CRÍTICAS (Afetam funcionalidade core)
═══════════════════════════════════════════════════════════════════════════════

[1] ⬜ NENHUM termo HPO foi importado no banco!
    Status: seed.ts existe mas nunca foi executado
    Impacto: CRÍTICO | Tempo: 1h
    Solução: npx tsx prisma/seed.ts (importar 17.020 termos)
    Arquivos: backend/prisma/seed.ts (já existe)
             backend/prisma/import-all-terms.ts (já existe)

[2] ⬜ OAuth ORCID não testado em produção
    Status: Código implementado mas CLIENT_ID não configurado
    Impacto: Alto | Tempo: 1h
    Solução: Registrar app no ORCID + testar callback
    Arquivos: .env (ORCID_CLIENT_ID, ORCID_CLIENT_SECRET)
             backend/src/routes/auth.routes.ts (testar)

[3] ⬜ Falta sistema de "REVIEWER" automático
    Status: Role REVIEWER existe mas sem auto-promoção
    Impacto: Alto | Tempo: 2h
    Solução: Cronjob ou trigger: 50+ aprovadas + 85%+ taxa → REVIEWER
    Arquivos: backend/src/services/promotion.service.ts (novo)
             backend/src/cron/check-promotions.ts (novo)

[4] ⬜ Sincronização HPO não cria Pull Request automaticamente
    Status: Gera TSV mas não integra com GitHub
    Impacto: Alto | Tempo: 3h
    Solução: GitHub API para criar branch + PR
    Arquivos: backend/src/services/github.service.ts (novo)
             backend/src/routes/analytics.routes.ts (POST /sync)


═══════════════════════════════════════════════════════════════════════════════
🎨 MELHORIAS DE UX/UI
═══════════════════════════════════════════════════════════════════════════════

[16] ⬜ Dashboard inicial muito vazio
[17] ⬜ Mensagens de erro genéricas
[18] ⬜ Falta explicação de Confidence Level
[19] ⬜ Botão "Traduzir" muito genérico
[20] ⬜ Histórico sem filtro rápido (tabs visuais)
[21] ⬜ Cards de termos sem ícones por categoria
[22] ⬜ Leaderboard sem avatar dos usuários
[23] ⬜ Notificações sem preview
[24] ⬜ Conflitos sem comparação lado-a-lado
[25] ⬜ Falta breadcrumbs de navegação
[26] ⬜ Loading states genéricos
[27] ⬜ Sem feedback visual ao fazer ação
[28] ⬜ Badges muito pequenos
[29] ⬜ Sem dark mode
[30] ⬜ Histórico de Sync sem visual (timeline)
[31] ⬜ Dashboard não é mobile-friendly
[32] ⬜ Leaderboard overflow em mobile
[33] ⬜ Sem rate limiting visual
[34] ⬜ Tokens não expiram no frontend
[35] ⬜ Sem confirmação para ações destrutivas
[36] ⬜ Infinite scroll sem cache
[37] ⬜ Notificações com polling desnecessário
[38] ⬜ Leaderboard sem cache


═══════════════════════════════════════════════════════════════════════════════
📊 STATUS ATUAL DOS TESTES
═══════════════════════════════════════════════════════════════════════════════

UNIT TESTS (Jest):
  ✅ auth-fixed.test.ts           (13/13 passing)
  ✅ security-permissions.test.ts (15/15 passing)
  ✅ analytics.test.ts            (11/11 passing)
  ✅ conflicts-fixed.test.ts      (3/3 passing)
  ✅ e2e-scenarios.test.ts        (8/8 passing)
  ⚠️ gamification.test.ts         (12/13 passing - 1 failing)
  
  TOTAL: 59/60 passing (98.3%)

E2E TESTS (Playwright):
  ❌ 01-auth.spec.ts         (0/2 - Windows networking block)
  ❌ 02-conflicts.spec.ts    (0/5 - Windows networking block)
  ❌ 03-analytics.spec.ts    (0/5 - Windows networking block)
  ❌ 04-security.spec.ts     (0/5 - Windows networking block)
  
  TOTAL: 0/17 running (cobertura replicada via unit tests)


═══════════════════════════════════════════════════════════════════════════════
🎯 ORDEM DE EXECUÇÃO DEFINIDA
═══════════════════════════════════════════════════════════════════════════════

FASE 1: NICE-TO-HAVE (Começar agora!)
  → [11] Página de Guidelines
  → [12] Expert Routing
  → [13] Dashboard de Produtividade
  → [14] Bulk Actions
  → [15] Prisma Studio no README

FASE 2: IMPORTANTES
  → [5] Sistema de Rejection estruturado
  → [6] Moderação de usuários
  → [7] Three-Strike System
  → [8] Melhorar recomendações
  → [9] UI de Comentários
  → [10] Email notifications

FASE 3: CRÍTICAS
  → [1] Importar termos HPO (17.020)
  → [2] Testar OAuth ORCID
  → [3] Auto-promoção para REVIEWER
  → [4] GitHub PR automático

FASE 4: UX/UI
  → [16-38] Todos os itens de polimento visual


═══════════════════════════════════════════════════════════════════════════════
📝 NOTAS DE IMPLEMENTAÇÃO
═══════════════════════════════════════════════════════════════════════════════

- Cada item deve ser implementado INDIVIDUALMENTE
- Testar após cada implementação (npm test)
- Commitar após cada item concluído
- Não pular para próximo até atual estar 100%
- Priorizar qualidade sobre velocidade
- Documentar mudanças no README se necessário

- Backend rodando em: http://localhost:3001
- Frontend rodando em: http://localhost:5173
- PostgreSQL: localhost:5433
- Redis: localhost:6379


═══════════════════════════════════════════════════════════════════════════════
FIM DO ROADMAP - Atualizado em 15/10/2025
═══════════════════════════════════════════════════════════════════════════════
