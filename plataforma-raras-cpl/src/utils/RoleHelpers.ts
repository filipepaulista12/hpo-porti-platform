/**
 * RoleHelpers.ts
 * 
 * Utilit√°rio para verifica√ß√£o de permiss√µes baseadas em roles no frontend.
 * Espelha as permiss√µes definidas no backend (src/middleware/permissions.ts)
 * 
 * IMPORTANTE: Manter sincronizado com o backend!
 * Se adicionar nova permiss√£o no backend, adicione tamb√©m aqui.
 */

// ============================================
// HIERARQUIA DE ROLES
// ============================================

export const ROLE_HIERARCHY: Record<string, number> = {
  TRANSLATOR: 1,
  REVIEWER: 2,
  VALIDATOR: 3,
  MODERATOR: 4,
  COMMITTEE_MEMBER: 5,
  ADMIN: 6,
  SUPER_ADMIN: 7
};

// ============================================
// VERIFICA√á√ïES B√ÅSICAS DE ROLE
// ============================================

/**
 * Verifica se o usu√°rio √© um Tradutor
 */
export const isTranslator = (userRole: string): boolean => {
  return userRole === 'TRANSLATOR';
};

/**
 * Verifica se o usu√°rio √© um Revisor
 */
export const isReviewer = (userRole: string): boolean => {
  return userRole === 'REVIEWER';
};

/**
 * Verifica se o usu√°rio √© um Validador
 */
export const isValidator = (userRole: string): boolean => {
  return userRole === 'VALIDATOR';
};

/**
 * Verifica se o usu√°rio √© um Moderador ou superior
 */
export const isModerator = (userRole: string): boolean => {
  const roleLevel = ROLE_HIERARCHY[userRole] || 0;
  return roleLevel >= ROLE_HIERARCHY.MODERATOR;
};

/**
 * Verifica se o usu√°rio √© Membro do Comit√™ ou superior
 */
export const isCommitteeMember = (userRole: string): boolean => {
  const roleLevel = ROLE_HIERARCHY[userRole] || 0;
  return roleLevel >= ROLE_HIERARCHY.COMMITTEE_MEMBER;
};

/**
 * Verifica se o usu√°rio √© Administrador ou Super Admin
 */
export const isAdmin = (userRole: string): boolean => {
  return userRole === 'ADMIN' || userRole === 'SUPER_ADMIN';
};

/**
 * Verifica se o usu√°rio √© Super Admin
 */
export const isSuperAdmin = (userRole: string): boolean => {
  return userRole === 'SUPER_ADMIN';
};

// ============================================
// PERMISS√ïES ESPEC√çFICAS
// ============================================

/**
 * Pode aprovar tradu√ß√µes?
 * Apenas ADMIN e SUPER_ADMIN
 */
export const canApproveTranslation = (userRole: string): boolean => {
  return isAdmin(userRole);
};

/**
 * Pode rejeitar tradu√ß√µes?
 * MODERATOR, ADMIN e SUPER_ADMIN
 */
export const canRejectTranslation = (userRole: string): boolean => {
  return isModerator(userRole);
};

/**
 * Pode revisar tradu√ß√µes?
 * REVIEWER ou superior (todos podem revisar)
 */
export const canReview = (userRole: string): boolean => {
  const roleLevel = ROLE_HIERARCHY[userRole] || 0;
  return roleLevel >= ROLE_HIERARCHY.REVIEWER;
};

/**
 * Pode acessar o Dashboard Administrativo?
 * MODERATOR ou superior
 */
export const canAccessAdminDashboard = (userRole: string): boolean => {
  return isModerator(userRole);
};

/**
 * Pode votar em conflitos de tradu√ß√£o?
 * COMMITTEE_MEMBER, ADMIN e SUPER_ADMIN
 */
export const canVoteOnConflict = (userRole: string): boolean => {
  return isCommitteeMember(userRole);
};

/**
 * Pode gerenciar usu√°rios (banir, desbanir, editar)?
 * Apenas ADMIN e SUPER_ADMIN
 */
export const canManageUsers = (userRole: string): boolean => {
  return isAdmin(userRole);
};

/**
 * Pode banir/desbanir usu√°rios?
 * Apenas ADMIN e SUPER_ADMIN
 */
export const canBanUsers = (userRole: string): boolean => {
  return isAdmin(userRole);
};

/**
 * Pode criar e gerenciar conflitos?
 * MODERATOR ou superior
 */
export const canManageConflicts = (userRole: string): boolean => {
  return isModerator(userRole);
};

/**
 * Pode deletar coment√°rios de outros usu√°rios?
 * MODERATOR ou superior
 */
export const canDeleteAnyComment = (userRole: string): boolean => {
  return isModerator(userRole);
};

/**
 * Pode fazer aprova√ß√£o em lote (bulk approve)?
 * Apenas ADMIN e SUPER_ADMIN
 */
export const canBulkApprove = (userRole: string): boolean => {
  return isAdmin(userRole);
};

/**
 * Pode sincronizar com HPO oficial?
 * Apenas ADMIN e SUPER_ADMIN
 */
export const canSyncToHPO = (userRole: string): boolean => {
  return isAdmin(userRole);
};

/**
 * Pode ver estat√≠sticas completas do sistema?
 * MODERATOR ou superior
 */
export const canViewFullStats = (userRole: string): boolean => {
  return isModerator(userRole);
};

/**
 * Pode exportar tradu√ß√µes?
 * Qualquer usu√°rio autenticado
 */
export const canExportTranslations = (userRole: string): boolean => {
  return !!userRole; // Qualquer role v√°lido
};

/**
 * Pode editar o pr√≥prio perfil?
 * Qualquer usu√°rio autenticado
 */
export const canEditOwnProfile = (userRole: string): boolean => {
  return !!userRole;
};

/**
 * Pode submeter tradu√ß√µes?
 * Qualquer usu√°rio autenticado
 */
export const canSubmitTranslation = (userRole: string): boolean => {
  return !!userRole;
};

/**
 * Pode votar em tradu√ß√µes?
 * Qualquer usu√°rio autenticado
 */
export const canVoteOnTranslation = (userRole: string): boolean => {
  return !!userRole;
};

/**
 * Pode comentar?
 * Qualquer usu√°rio autenticado
 */
export const canComment = (userRole: string): boolean => {
  return !!userRole;
};

// ============================================
// HELPERS AUXILIARES
// ============================================

/**
 * Retorna o nome em portugu√™s do role
 */
export const getRoleDisplayName = (role: string): string => {
  const roleNames: Record<string, string> = {
    TRANSLATOR: 'Tradutor',
    REVIEWER: 'Revisor',
    VALIDATOR: 'Validador',
    MODERATOR: 'Moderador',
    COMMITTEE_MEMBER: 'Membro do Comit√™',
    ADMIN: 'Administrador',
    SUPER_ADMIN: 'Super Administrador'
  };

  return roleNames[role] || role;
};

/**
 * Retorna descri√ß√£o curta do role
 */
export const getRoleDescription = (role: string): string => {
  const descriptions: Record<string, string> = {
    TRANSLATOR: 'Pode traduzir termos e votar em tradu√ß√µes',
    REVIEWER: 'Tradutor experiente com alta taxa de aprova√ß√£o',
    VALIDATOR: 'Especialista convidado para valida√ß√µes',
    MODERATOR: 'Pode aprovar, rejeitar e moderar tradu√ß√µes',
    COMMITTEE_MEMBER: 'Vota em conflitos de tradu√ß√£o',
    ADMIN: 'Gerencia plataforma e usu√°rios',
    SUPER_ADMIN: 'Acesso total ao sistema'
  };

  return descriptions[role] || 'Role desconhecido';
};

/**
 * Retorna emoji representando o role
 */
export const getRoleEmoji = (role: string): string => {
  const emojis: Record<string, string> = {
    TRANSLATOR: '‚úçÔ∏è',
    REVIEWER: '‚≠ê',
    VALIDATOR: 'üéì',
    MODERATOR: 'üõ°Ô∏è',
    COMMITTEE_MEMBER: '‚öñÔ∏è',
    ADMIN: 'üëë',
    SUPER_ADMIN: 'üíé'
  };

  return emojis[role] || 'üë§';
};

/**
 * Compara dois roles e retorna se o primeiro √© maior/igual ao segundo
 */
export const hasRoleOrHigher = (userRole: string, requiredRole: string): boolean => {
  const userLevel = ROLE_HIERARCHY[userRole] || 0;
  const requiredLevel = ROLE_HIERARCHY[requiredRole] || 0;
  return userLevel >= requiredLevel;
};

/**
 * Retorna lista de permiss√µes do role em formato leg√≠vel
 */
export const getRolePermissions = (userRole: string): string[] => {
  const permissions: string[] = [];

  // Permiss√µes b√°sicas (todos t√™m)
  if (canSubmitTranslation(userRole)) {
    permissions.push('Submeter tradu√ß√µes');
  }
  if (canVoteOnTranslation(userRole)) {
    permissions.push('Votar em tradu√ß√µes');
  }
  if (canComment(userRole)) {
    permissions.push('Comentar em tradu√ß√µes');
  }
  if (canExportTranslations(userRole)) {
    permissions.push('Exportar tradu√ß√µes');
  }

  // Permiss√µes especiais
  if (canRejectTranslation(userRole)) {
    permissions.push('Rejeitar tradu√ß√µes');
  }
  if (canApproveTranslation(userRole)) {
    permissions.push('Aprovar tradu√ß√µes');
  }
  if (canVoteOnConflict(userRole)) {
    permissions.push('Votar em conflitos');
  }
  if (canManageConflicts(userRole)) {
    permissions.push('Gerenciar conflitos');
  }
  if (canDeleteAnyComment(userRole)) {
    permissions.push('Deletar qualquer coment√°rio');
  }
  if (canManageUsers(userRole)) {
    permissions.push('Gerenciar usu√°rios');
  }
  if (canBulkApprove(userRole)) {
    permissions.push('Aprova√ß√£o em lote');
  }
  if (canSyncToHPO(userRole)) {
    permissions.push('Sincronizar com HPO');
  }
  if (canAccessAdminDashboard(userRole)) {
    permissions.push('Acessar painel administrativo');
  }

  return permissions;
};

// ============================================
// EXPORT DEFAULT
// ============================================

export default {
  // Hierarquia
  ROLE_HIERARCHY,
  
  // Verifica√ß√µes b√°sicas
  isTranslator,
  isReviewer,
  isValidator,
  isModerator,
  isCommitteeMember,
  isAdmin,
  isSuperAdmin,
  
  // Permiss√µes espec√≠ficas
  canReview,
  canApproveTranslation,
  canRejectTranslation,
  canAccessAdminDashboard,
  canVoteOnConflict,
  canManageUsers,
  canBanUsers,
  canManageConflicts,
  canDeleteAnyComment,
  canBulkApprove,
  canSyncToHPO,
  canViewFullStats,
  canExportTranslations,
  canEditOwnProfile,
  canSubmitTranslation,
  canVoteOnTranslation,
  canComment,
  
  // Helpers
  getRoleDisplayName,
  getRoleDescription,
  getRoleEmoji,
  hasRoleOrHigher,
  getRolePermissions
};
